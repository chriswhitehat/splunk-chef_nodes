[Chef: Changes or Unexpected Event]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.subject.report = Splunk Alert: $name$
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m@m
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_view = search
search = index=chef (NOT "Run list " NOT Processing NOT handlers NOT "Run complete" NOT "loading cookbooks" NOT "Data collector" NOT pid NOT "info: platform" NOT "chef 13" NOT forking NOT "starting chef run" NOT "ohai/plugins does not exist" NOT "storing updated cookbooks" NOT "ruby_block" NOT "create action to support before action" NOT daemonizing NOT forked NOT "remote_file[/tmp/splunkforwarder.deb]" NOT "file[*snortu*.log*") | rex field=_raw "\S+ (?<level>\w+): (?<msg>.+)" | eval node=host | table _time node level msg

[Chef: Updated Cookbooks]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.subject.report = Splunk Alert: $name$
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m@m
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_view = search
search = index=chef "storing updated cookbooks" | rex field=_raw "Storing updated cookbooks/(?<cookbook>[^/]+)/(?<updated_object>.+) in the cache"  | rename host AS node | table _time node cookbook updated_object | sort 0 node updated_object

[Chef: Derelict Nodes]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */30 * * * *
dispatch.earliest_time = -30m@m
enableSched = 1
quantity = 0
relation = greater than
search = | inputlookup chef_nodes \
| search active=True NOT \
    [ search index=chef \
    | stats count by host \
    | rename host AS node \
    | fields node]\
| eval status = "Node has not check in for 30 minutes"\
| table node status

[Lookup: Update Chef Nodes]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m@m
dispatch.latest_time = now
enableSched = 1
search = index=chef NOT [ |inputlookup chef_nodes | rename node AS host | fields host]\
| stats count by host \
| rename host AS node \
| fields node\
| eval active = "True"\
| outputlookup append=t chef_nodes

[Chef: Slow chef-client Runtime]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -24h
enableSched = 1
quantity = 0
relation = greater than
search = index=chef "Chef Run complete" OR "Chef run process exited unsuccessfully" \
| rex field=_raw "\S+ (?<level>\w+):" \
| rex field=_raw "Chef Run complete in (?<last_runtime_seconds>[0-9\.]+)"\
| eval status = if(level="INFO", "Success", "Fail") \
| stats avg(last_runtime_seconds) AS avg_runtime stdev(last_runtime_seconds) AS stdev_runtime latest(last_runtime_seconds) AS last_runtime_seconds latest(status) AS last_chef_run latest(_time) AS _time by host\
| where last_runtime_seconds > 60 AND last_runtime_seconds > avg_runtime + 2 * stdev_runtime\
| eval msg = "chef-client on node is performing exceptionally slow"\
| table _time host avg_runtime stdev_runtime last_runtime_seconds last_chef_run msg

[Chef: Continuous chef-client Failures]
action.email = 1
action.email.inline = 1
action.email.sendresults = 1
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -1h
enableSched = 1
quantity = 0
relation = greater than
search = index=chef "Chef Run complete" OR "Chef run process exited unsuccessfully" \
| rex field=_raw "\S+ (?<level>\w+):" \
| eval status = if(level="INFO", "Success", "Fail") \
| stats latest(_time) AS _time values(status) AS chef_run_status dc(status) AS distinct_status by host \
| rename host AS node \
| search chef_run_status=Fail \
| where distinct_status = 1\
| table _time node chef_run_status
